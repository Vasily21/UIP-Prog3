El Modelo Vista Controlador es un patrón para el desarrollo del software que se basa en separar los datos (por un lado), la interfaz del usuario (por otro) y la lógica interna (por un último lado). Es mayormente usado en aplicaciones web, dónde la vista es la página HTML, el modelo es el Sistema de Gestión de Base de Datos y la lógica interna, y el controlador es el responsable de recibir los eventos y darles solución.
Cada elemento:
•	Modelo: Es la representación de la información en el sistema. Trabaja junto a la vista para mostrar la información al usuario y es accedido por el controlador para añadir, eliminar, consultar o actualizar datos.
•	Vista: Es la presenta al modelo en un formato adecuado para que el usuario pueda interactuar con él, casi siempre es la interfaz de usuario.
•	Controlador: Es el elemento más abstracto. Recibe, trata y responde los eventos enviados por el usuario o por la propia aplicación. Interactúa tanto con el modelo como con la vista.
En Python
Tanto los widgets TreeView como los ComboBox se construyen sobre el diseño modelo/vista/controlador. El modelo (una implementación de Gtk.TreeModel, generalmente Gtk.TreeStore o Gtk.ListStore) almacena los datos; la vista (por ejemplo, Gtk.TreeView, Gtk.ComboBox, o Gtk.ComboBoxText) recibe las notificaciones de cambio y muestra el contenido del modelo. El controlador, finalmente, cambia el estado del modelo (a través de algunos métodos en la implementación del modelo, como append() o remove()) y le notifica a la vista de estos cambios (a través de señales como «changed»).
La principal diferencia entre las dos implementaciones primarias de Gtk.TreeModel es que Gtk.ListStore contiene filas simples de datos sin hijos, mientras que Gtk.TreeStore también contiene filas de datos, pero cada fila puede tener filas hijas (que a su vez pueden tener filas hijas, y así sucesivamente).
Los datos en el modelo pueden obtenerse o modificarse usando el «iter» del árbol y el índice de columna, Gtk.TreeIter, o Gtk.TreePath.
Con el objeto de lista empotrado de Python puede usar len() para obtener el número de filas y usar fragmentos para obtener o establecer valores. De lo contrario, el método append() devuelve una instancia de Gtk.TreeIter, que apunta al lugar de la fila insertada recientemente. También puede obtener un Gtk.TreeIter llamando a get_iter().
Como Gtk.ListStore sólo contiene un nivel, es decir que los nodos no tienen nodos hijos, una ruta es esencialmente el índice de la fila a la que quiere acceder. En el caso de Gtk.TreeStore, una ruta es una lista de índices o una cadena. La forma de la cadena es una lista de números separados por «:». Cada número se refiere al desplazamiento en ese nivel. Entonces, la ruta «0» se refiere al nodo raíz y la ruta «2:4» al quinto hijo del tercer nodo.
